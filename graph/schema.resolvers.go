package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"fmt"
	"shooting-api/graph/model"

	"github.com/google/uuid"
)

// CreateSession is the resolver for the createSession field.
func (r *mutationResolver) CreateSession(ctx context.Context, name string, date string) (*model.Session, error) {
	session := model.Session{
		ID:     uuid.NewString(),
		Name:   name,
		Date:   date,
		Series: nil,
	}

	err := r.DB.Create(&session).Error
	if err != nil {
		return nil, err
	}

	return &session, nil
}

// AddSeries is the resolver for the addSeries field.
func (r *mutationResolver) AddSeries(ctx context.Context, sessionID string) (*model.Series, error) {
	var session model.Session
	err := r.DB.Where("id = ?", sessionID).First(&session).Error
	if err != nil {
		return nil, fmt.Errorf("failed to find session: %w", err)
	}

	series := model.Series{
		ID:        uuid.NewString(),
		SessionID: sessionID,
		Shots:     nil,
	}

	err = r.DB.Create(&series).Error
	if err != nil {
		return nil, fmt.Errorf("failed to create series: %w", err)
	}

	return &series, nil
}

// AddShot is the resolver for the addShot field.
func (r *mutationResolver) AddShot(ctx context.Context, seriesID string, score int) (*model.Shot, error) {
	err := r.DB.Where("id = ?", seriesID).First(&model.Series{}).Error
	if err != nil {
		return nil, fmt.Errorf("failed to find series: %w", err)
	}

	shot := model.Shot{
		ID:       uuid.NewString(),
		Score:    score,
		SeriesID: seriesID,
	}

	err = r.DB.Create(&shot).Error
	if err != nil {
		return nil, fmt.Errorf("failed to create shot: %w", err)
	}

	return &shot, nil
}

// RemoveShot is the resolver for the removeShot field.
func (r *mutationResolver) RemoveShot(ctx context.Context, shotID string) (*model.Shot, error) {
	var shot model.Shot
	err := r.DB.Where("id = ?", shotID).First(&shot).Error
	if err != nil {
		return nil, fmt.Errorf("failed to find shot: %w", err)
	}

	err = r.DB.Where("id = ?", shotID).Delete(&model.Shot{}).Error
	if err != nil {
		return nil, fmt.Errorf("failed to delete shot: %w", err)
	}

	return &shot, nil
}

// UpdateShot is the resolver for the updateShot field.
func (r *mutationResolver) UpdateShot(ctx context.Context, shotID string, score int) (*model.Shot, error) {
	panic(fmt.Errorf("not implemented: UpdateShot - updateShot"))
}

// Sessions is the resolver for the sessions field.
func (r *queryResolver) Sessions(ctx context.Context) ([]model.Session, error) {
	var sessions []model.Session
	err := r.DB.Find(&sessions).Error
	if err != nil {
		return nil, fmt.Errorf("failed to find sessions: %w", err)
	}

	return sessions, nil
}

// Session is the resolver for the session field.
func (r *queryResolver) Session(ctx context.Context, id string) (*model.Session, error) {
	var session model.Session
	err := r.DB.Where("id = ?", id).First(&session).Error
	if err != nil {
		return nil, fmt.Errorf("failed to find session: %w", err)
	}

	return &session, nil
}

// Series is the resolver for the series field.
func (r *queryResolver) Series(ctx context.Context, id string) (*model.Series, error) {
	var series model.Series
	err := r.DB.Where("id = ?", id).First(&series).Error
	if err != nil {
		return nil, fmt.Errorf("failed to find series: %w", err)
	}

	return &series, nil
}

// Session is the resolver for the session field.
func (r *seriesResolver) Session(ctx context.Context, obj *model.Series) (*model.Session, error) {
	var session model.Session
	err := r.DB.Where("id = ?", obj.SessionID).First(&session).Error
	if err != nil {
		return nil, fmt.Errorf("failed to find session: %w", err)
	}

	return &session, nil
}

// Series is the resolver for the series field.
func (r *sessionResolver) Series(ctx context.Context, obj *model.Session) ([]model.Series, error) {
	var series []model.Series
	err := r.DB.Where("session_id = ?", obj.ID).Find(&series).Error
	if err != nil {
		return nil, fmt.Errorf("failed to find series: %w", err)
	}

	for i := range series {
		var shots []model.Shot
		err = r.DB.Where("series_id = ?", series[i].ID).Find(&shots).Error
		if err != nil {
			return nil, fmt.Errorf("failed to find shots: %w", err)
		}
		series[i].Shots = shots
	}

	return series, nil
}

// Series is the resolver for the series field.
func (r *shotResolver) Series(ctx context.Context, obj *model.Shot) (*model.Series, error) {
	var series model.Series
	err := r.DB.Where("id = ?", obj.SeriesID).First(&series).Error
	if err != nil {
		return nil, fmt.Errorf("failed to find series: %w", err)
	}

	return &series, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Series returns SeriesResolver implementation.
func (r *Resolver) Series() SeriesResolver { return &seriesResolver{r} }

// Session returns SessionResolver implementation.
func (r *Resolver) Session() SessionResolver { return &sessionResolver{r} }

// Shot returns ShotResolver implementation.
func (r *Resolver) Shot() ShotResolver { return &shotResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type seriesResolver struct{ *Resolver }
type sessionResolver struct{ *Resolver }
type shotResolver struct{ *Resolver }
